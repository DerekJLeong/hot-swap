import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import "../styles/globals.css";
import Head from "next/head";
import { connect, connectCachedProvider } from "/utils/web3Auth";
import { GlobalStateProvider } from "/utils/store";
import { getCookie, setCookie } from "/utils/cookie";
import Header from "./components/Header";

const App = ({ Component, pageProps, persistedUser }) => {
   const router = useRouter();
   const [marketContract, setMarketContract] = useState({});
   const [user, setUser] = useState(persistedUser);
   const loggedIn = !!user?.address && !!user?.chainId;

   // Auto connect to the cached provider or prompt user to login with wallet
   // we intiate the connection listeners from within the Header component so we
   // that we can dispatch actions to gloal state the modal connections
   // must be initiated from the top-most level, so this stays here for now
   useEffect(async () => {
      if (!loggedIn) {
         const { user, HotSwapMarketContract } = await connect();
         setUser(user);
         setMarketContract(HotSwapMarketContract);
         setCookie("user", JSON.stringify(user));
         // router.reload();
      }
      if (loggedIn && localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER")) {
         const { user, HotSwapMarketContract } = await connectCachedProvider();
         setUser(user);
         setMarketContract(HotSwapMarketContract);
         setCookie("user", JSON.stringify(user));
         // router.reload();
      }
      // Todo Remove user data if logged in and no cache provider is present
      // if (loggedIn && !localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER")) {
      //    const { user, web3Auth, HotSwapMarketContract } =
      //       await connectCachedProvider();
      //    setCookie("user", JSON.stringify(user));
      //    router.reload();
      //    console.log("TESTING", web3Auth, HotSwapMarketContract);
      // }
   }, []);

   console.log("TESTING", user, marketContract);
   return (
      <GlobalStateProvider persistedUser={user} marketContract={marketContract}>
         <Head>
            <title>Hot Swap</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <Header />
         <Component {...pageProps} />
      </GlobalStateProvider>
   );
};

App.getInitialProps = async ({ ctx }) => {
   // Persists global state on page refresh
   // Check if there a state cookie saved, if cookie is available then use the cookie's value as our initial state
   const cookies = ctx?.req ? ctx.req.headers.cookie : document.cookie;
   const userFromCookie = await getCookie("user", cookies);
   const userObject = (userFromCookie && JSON.parse(userFromCookie)) || {};
   return {
      persistedUser: userObject,
   };
};

export default App;
